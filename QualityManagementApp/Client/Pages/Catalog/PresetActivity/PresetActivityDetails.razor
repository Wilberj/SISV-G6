@page "/presetActivities_details"
@page "/presetActivities_details/{PresetActivityId}"
@using QualityManagementApp.Shared
@using QualityManagementApp.Client.Services.Contracts.Catalog
@implements IDisposable 
@inject IPresetActivityService PresetActivityService

<PageTitle>@(PresetActivityId == null ? "Nueva Actividad Predefinida" : "Detalles de la Actividad Predefinida")</PageTitle>

    <BusyOverlay @bind-visible="@PresetActivityService.IsBusy" />

    <EditForm Context="presetActivity" Model="@PresetActivityService.PresetActivity" OnValidSubmit="@PresetActivityService.AddPresetActivity">
        <DataAnnotationsValidator />
        <MudStack Spacing="12" Class="mx-3 mb-6">
            <MudStack Spacing="6">
                <MudText Align="Align.Center" Class="my-5" Color="Color.Secondary" Typo="Typo.h4">@(PresetActivityId == null ? "Nueva Actividad" : "Detalles de la Actividad")</MudText>


                <MudTextField ReadOnly="@ReadOnly" Variant="Variant.Outlined" Label="Titulo de la Actividad" HelperText="Ingrese un titulo" @bind-Value="@PresetActivityService.PresetActivity.Title" />
                <MudTextField ReadOnly="@ReadOnly" Variant="Variant.Outlined" Label="Descripción" HelperText="Ingrese una Descripción" @bind-Value="@PresetActivityService.PresetActivity.Description" Lines="6" />
                <MudTextField ReadOnly="@ReadOnly" Variant="Variant.Outlined" Label="Calidad Esperada" HelperText="Calidad Esperada" @bind-Value="@PresetActivityService.PresetActivity.QualityExpected" />

            </MudStack>
        </MudStack>


    @if (ReadOnly == false)
    {
        <MudFab Class="z-33" Style="position: sticky; right: 3.5%; bottom: 10%; float: right" Disabled="@(PresetActivityService.PresetActivity.Title == null? true : false)" StartIcon="@Icons.Material.Filled.Add" Size="Size.Large" Color="Color.Secondary" Label="Agregar Actividad" ButtonType="ButtonType.Submit" />
    }
</EditForm>
@code {
    [Parameter]
    public string? PresetActivityId { get; set; }

    bool ReadOnly { get; set; }

    CancellationTokenSource cts = new();
    //State state = new("Copiar para compartir", Icons.Material.Filled.ContentCopy);
    //record State(string Text, string Icon, bool IsDisabled = false);

    protected override async Task OnParametersSetAsync()
    {
        PresetActivityService.IsBusy = true;
        if (PresetActivityId == null)
        {
            ReadOnly = false;
            PresetActivityService.PresetActivity = new();
        }
        else
        {
            ReadOnly = true;
            await PresetActivityService.GetPresetActivity(PresetActivityId);
        }
        PresetActivityService.IsBusy = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await PresetActivityService.GetPresetActivities();
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
}
