@page "/city_details"
@page "/city_details/{CityId:int}"
@inject ICityService CityService
@inject IDepartmentService DepartmentService

<PageTitle>@(CityId == null ? "Nueva Ciudad" : "Detalles de la ciudad")</PageTitle>

    <BusyOverlay @bind-visible="@CityService.IsBusy" />

    <EditForm Context="city" Model="@CityService.City" OnValidSubmit="@CityService.AddCity">
        <DataAnnotationsValidator />
        <MudStack Spacing="12" Class="mx-3 mb-6">
            <MudStack Spacing="6">
                <MudText Align="Align.Center" Class="my-5" Color="Color.Secondary" Typo="Typo.h4">@(CityId == null ? "Nueva Ciudad" : "Detalles de la ciudad")</MudText>

                <MudTextField ReadOnly="@ReadOnly" Variant="Variant.Outlined" Label="Nombre de la ciudad" HelperText="Ingrese una ciudad" @bind-Value="@CityService.City.Name" For="@(() => CityService.City.Name)" />

                @*<MudAutocomplete ReadOnly="@ReadOnly" Label="Departamento" HelperText="Seleccione un departamento" SelectValueOnTab="true" AdornmentIcon="@Icons.Material.Filled.Search" Required="true" CoerceValue="false" Variant="Variant.Outlined" ToStringFunc="@(i => i.Name)" ShowProgressIndicator="true" ResetValueOnEmptyText="true" SearchFunc="SearchCityAsync" T="Model.Department" @bind-Value="SelectedDepartment">
                    <ProgressIndicatorTemplate>
                        <MudProgressLinear Size="Size.Small" Indeterminate="true" Color="Color.Primary" />
                    </ProgressIndicatorTemplate>
                </MudAutocomplete>*@

                <MudSelect ReadOnly="@ReadOnly" For="@(() => CityService.City.FkDepartment)" Variant="Variant.Outlined" Required="true" AdornmentIcon="@Icons.Material.Filled.Category" AdornmentColor="Color.Secondary" T="int?" Label="Departamento" HelperText="Seleccione un departamento" @bind-Value="@CityService.City.FkDepartment">
                @foreach (var department in DepartmentService.Departments!)
                {
                    <MudSelectItem T="int?" Value="@department.PkDepartment">@department.Name</MudSelectItem>
                }
            </MudSelect>
            </MudStack>
        </MudStack>

    @if (ReadOnly == false)
    {
        <MudFab Class="z-33" Style="position: sticky; right: 3.5%; bottom: 10%; float: right" Disabled="@(CityService.City.Name == null? true : false)" StartIcon="@Icons.Material.Filled.Add" Size="Size.Large" Color="Color.Secondary" Label="Agregar Ciudad" ButtonType="ButtonType.Submit" />
    }
</EditForm>
@code {
    [Parameter]
    public int? CityId { get; set; }

    bool ReadOnly { get; set; }

    //Model.Department SelectedDepartment { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        CityService.IsBusy = true;
        if (CityId == null)
        {
            ReadOnly = false;
            CityService.City = new();
        }
        else
        {
            ReadOnly = true;
            //var department = DepartmentService.Departments!;
            await CityService.GetCity(CityId);
            //Task.Run(() => CityService.GetCity(CityId).WaitAsync(TimeSpan.MaxValue)).Wait().Start();
            //var _departments = DepartmentService.Departments.Where(x => x.PkDepartment == CityId).FirstOrDefault();
            //SelectedDepartment = _departments!;
        }
        CityService.IsBusy = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await DepartmentService.GetDepartments();
        await CityService.GetCities();
    }

    //async Task<IEnumerable<Model.Department>> SearchCityAsync(string value)
    //{
    //    await Task.Delay(1000);

    //    var _departments = DepartmentService.Departments!;

    //    if (string.IsNullOrEmpty(value)) return _departments.AsEnumerable<Model.Department>()!;
    //    return _departments.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    //}

    //void AddCity()
    //{
    //    CityService.City.FkDepartment = SelectedDepartment.PkDepartment;
    //    CityService.AddCity();
    //}
}
