@page "/employee_details"
@page "/employee_details/{employeeId:int}"
@using QualityManagementApp.Shared
@using QualityManagementApp.Client.Services.Contracts.Catalog
@inject IEmployeeService EmployeeService
@inject IPositionService PositionService


<PageTitle>@(EmployeeId == null ? "Nuevo Empleado" : "Detalles del Empleado")</PageTitle>

    <BusyOverlay @bind-visible="@EmployeeService.IsBusy" />

    <EditForm Context="employee" Model="@EmployeeService.Employee" OnValidSubmit="@EmployeeService.AddEmployee">
        <DataAnnotationsValidator />
        <MudStack Spacing="12" Class="mx-3 mb-6">
            <MudStack Spacing="6">
                <MudText Align="Align.Center" Class="my-5" Color="Color.Secondary" Typo="Typo.h4">@(EmployeeId == null ? "Nuevo Empleado" : "Detalles del Empleado")</MudText>

                <MudTextField ReadOnly="@ReadOnly" Variant="Variant.Outlined" Label="Identificación" HelperText="Ingrese el numero de identificación" @bind-Value="@EmployeeService.Employee.IdentificationCard" />

                <MudTextField ReadOnly="@ReadOnly" Variant="Variant.Outlined" Label="Primer Nombre" HelperText="Ingrese el Primer Nombre" @bind-Value="@EmployeeService.Employee.FirstName" />

                <MudTextField ReadOnly="@ReadOnly" Variant="Variant.Outlined" Label="Segundo nombre" HelperText="Ingrese el Segundo Nombre" @bind-Value="@EmployeeService.Employee.SecondName" />

                <MudTextField ReadOnly="@ReadOnly" Variant="Variant.Outlined" Label="Identificación" HelperText="Ingrese el Primer Apellido" @bind-Value="@EmployeeService.Employee.FirstSurname" />

                <MudTextField ReadOnly="@ReadOnly" Variant="Variant.Outlined" Label="Identificación" HelperText="Ingrese el Segundo Apellido" @bind-Value="@EmployeeService.Employee.SecondSurname" />

                <MudSelect ReadOnly="@ReadOnly" For="@(() => EmployeeService.Employee.FkCity)" Variant="Variant.Outlined" Required="true" AdornmentIcon="@Icons.Material.Filled.Category" AdornmentColor="Color.Secondary" T="int?" Label="Ciudad" HelperText="Seleccione una ciudad" @bind-Value="@EmployeeService.Employee.FkCity">
                @foreach (var category in EmployeeService.Cities)
                {
                    <MudSelectItem T="int?" Value="@category.PkCity">@category.Name</MudSelectItem>
                }
                </MudSelect>

                <MudTextField ReadOnly="@ReadOnly" Variant="Variant.Outlined" Label="Dirección" HelperText="Ingrese la dirección" @bind-Value="@EmployeeService.Employee.HomeAddress" />

                <MudTextField ReadOnly="@ReadOnly" Variant="Variant.Outlined" Label="Celular" HelperText="Ingrese el numero de celular" @bind-Value="@EmployeeService.Employee.Telephone" />

            <MudSelect ReadOnly="@ReadOnly" For="@(() => EmployeeService.Employee.FkPosition)" Variant="Variant.Outlined" Required="true" AdornmentIcon="@Icons.Material.Filled.Category" AdornmentColor="Color.Secondary" T="int?" Label="Cargo" HelperText="Seleccione un cargo" @bind-Value="@EmployeeService.Employee.FkPosition">
                @foreach (var category in EmployeeService.Positions)
                {
                    <MudSelectItem T="int?" Value="@category.PkPosition">@category.Title</MudSelectItem>
                }
            </MudSelect>
            </MudStack>
        </MudStack>

    @if (ReadOnly == false)
    {
        <MudFab Class="z-33" Style="position: sticky; right: 3.5%; bottom: 10%; float: right" Disabled="@(EmployeeService.Employee.FirstName == null? true : false)" StartIcon="@Icons.Material.Filled.Add" Size="Size.Large" Color="Color.Secondary" Label="Agregar Empleado" ButtonType="ButtonType.Submit" />
    }
</EditForm>
@code {
    [Parameter]
    public int? EmployeeId { get; set; }

    bool ReadOnly { get; set; }

    //Model.Department SelectedDepartment { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        EmployeeService.IsBusy = true;
        if (EmployeeId == null)
        {
            ReadOnly = false;
            EmployeeService.Employee = new();
        }
        else
        {
            ReadOnly = true;
            //var department = DepartmentService.Departments!;
            await EmployeeService.GetEmployee(EmployeeId);
            //Task.Run(() => CityService.GetCity(CityId).WaitAsync(TimeSpan.MaxValue)).Wait().Start();
            //var _departments = DepartmentService.Departments.Where(x => x.PkDepartment == CityId).FirstOrDefault();
            //SelectedDepartment = _departments!;
        }
        EmployeeService.IsBusy = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await EmployeeService.GetEmployees();
        await EmployeeService.GetPositions();
        await EmployeeService.GetCity();
    }
}
